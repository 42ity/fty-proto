fty_proto(3)
=============

NAME
----
fty_proto - Core FTY protocols

SYNOPSIS
--------
----
//  Create a new fty_proto
fty_proto_t *
    fty_proto_new (int id);

//  Destroy the fty_proto
void
    fty_proto_destroy (fty_proto_t **self_p);

//  Parse a zmsg_t and decides whether it is fty_proto. Returns
//  true if it is, false otherwise. Doesn't destroy or modify the
//  original message.
bool
    is_fty_proto (zmsg_t *msg_p);

//  Parse a fty_proto from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. Destroys msg and
//  nullifies the msg reference.
fty_proto_t *
    fty_proto_decode (zmsg_t **msg_p);

//  Encode fty_proto into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.
zmsg_t *
    fty_proto_encode (fty_proto_t **self_p);

//  Receive and parse a fty_proto from the socket. Returns new object,
//  or NULL if error. Will block if there's no message waiting.
fty_proto_t *
    fty_proto_recv (void *input);

//  Receive and parse a fty_proto from the socket. Returns new object,
//  or NULL either if there was no input waiting, or the recv was interrupted.
fty_proto_t *
    fty_proto_recv_nowait (void *input);

//  Send the fty_proto to the output, and destroy it
int
    fty_proto_send (fty_proto_t **self_p, void *output);

//  Send the fty_proto to the output, and do not destroy it
int
    fty_proto_send_again (fty_proto_t *self, void *output);

//  Encode the METRIC
zmsg_t *
    fty_proto_encode_metric (
        zhash_t *aux,
        const char *type,
        const char *element_src,
        const char *value,
        const char *unit,
        uint64_t time);

//  Encode the ALERT
zmsg_t *
    fty_proto_encode_alert (
        zhash_t *aux,
        const char *rule,
        const char *element_src,
        const char *state,
        const char *severity,
        const char *description,
        uint64_t time,
        const char *action);

//  Encode the DATA
zmsg_t *
    fty_proto_encode_data (
        zhash_t *aux,
        const char *type,
        const char *key,
        const char *value);


//  Send the METRIC to the output in one step
//  WARNING, this call will fail if output is of type ZMQ_ROUTER.
int
    fty_proto_send_metric (void *output,
        zhash_t *aux,
        const char *type,
        const char *element_src,
        const char *value,
        const char *unit,
        uint64_t time);

//  Send the ALERT to the output in one step
//  WARNING, this call will fail if output is of type ZMQ_ROUTER.
int
    fty_proto_send_alert (void *output,
        zhash_t *aux,
        const char *rule,
        const char *element_src,
        const char *state,
        const char *severity,
        const char *description,
        uint64_t time,
        const char *action);

//  Send the DATA to the output in one step
//  WARNING, this call will fail if output is of type ZMQ_ROUTER.
int
    fty_proto_send_data (void *output,
        zhash_t *aux,
        const char *type,
        const char *key,
        const char *value);

//  Duplicate the fty_proto message
fty_proto_t *
    fty_proto_dup (fty_proto_t *self);

//  Print contents of message to stdout
void
    fty_proto_print (fty_proto_t *self);

//  Get/set the message routing id
zframe_t *
    fty_proto_routing_id (fty_proto_t *self);
void
    fty_proto_set_routing_id (fty_proto_t *self, zframe_t *routing_id);

//  Get the fty_proto id and printable command
int
    fty_proto_id (fty_proto_t *self);
void
    fty_proto_set_id (fty_proto_t *self, int id);
const char *
    fty_proto_command (fty_proto_t *self);

//  Get/set the aux field
zhash_t *
    fty_proto_aux (fty_proto_t *self);
//  Get the aux field and transfer ownership to caller
zhash_t *
    fty_proto_get_aux (fty_proto_t *self);
//  Set the aux field, transferring ownership from caller
void
    fty_proto_set_aux (fty_proto_t *self, zhash_t **aux_p);

//  Get/set a value in the aux dictionary
const char *
    fty_proto_aux_string (fty_proto_t *self,
        const char *key, const char *default_value);
uint64_t
    fty_proto_aux_number (fty_proto_t *self,
        const char *key, uint64_t default_value);
void
    fty_proto_aux_insert (fty_proto_t *self,
        const char *key, const char *format, ...);
size_t
    fty_proto_aux_size (fty_proto_t *self);

//  Get/set the type field
const char *
    fty_proto_type (fty_proto_t *self);
void
    fty_proto_set_type (fty_proto_t *self, const char *format, ...);

//  Get/set the element_src field
const char *
    fty_proto_element_src (fty_proto_t *self);
void
    fty_proto_set_element_src (fty_proto_t *self, const char *format, ...);

//  Get/set the value field
const char *
    fty_proto_value (fty_proto_t *self);
void
    fty_proto_set_value (fty_proto_t *self, const char *format, ...);

//  Get/set the unit field
const char *
    fty_proto_unit (fty_proto_t *self);
void
    fty_proto_set_unit (fty_proto_t *self, const char *format, ...);

//  Get/set the time field
uint64_t
    fty_proto_time (fty_proto_t *self);
void
    fty_proto_set_time (fty_proto_t *self, uint64_t time);

//  Get/set the rule field
const char *
    fty_proto_rule (fty_proto_t *self);
void
    fty_proto_set_rule (fty_proto_t *self, const char *format, ...);

//  Get/set the state field
const char *
    fty_proto_state (fty_proto_t *self);
void
    fty_proto_set_state (fty_proto_t *self, const char *format, ...);

//  Get/set the severity field
const char *
    fty_proto_severity (fty_proto_t *self);
void
    fty_proto_set_severity (fty_proto_t *self, const char *format, ...);

//  Get/set the description field
const char *
    fty_proto_description (fty_proto_t *self);
void
    fty_proto_set_description (fty_proto_t *self, const char *format, ...);

//  Get/set the action field
const char *
    fty_proto_action (fty_proto_t *self);
void
    fty_proto_set_action (fty_proto_t *self, const char *format, ...);

//  Get/set the key field
const char *
    fty_proto_key (fty_proto_t *self);
void
    fty_proto_set_key (fty_proto_t *self, const char *format, ...);

//  Self test of this class
int
    fty_proto_test (bool verbose);
----

DESCRIPTION
-----------

fty_proto - Core FTY protocols

Please add @discuss section in ../src/fty_proto.c.

EXAMPLE
-------
.From fty_proto_test method
----
//  Simple create/destroy test
fty_proto_t *self = fty_proto_new (0);
assert (self);
fty_proto_destroy (&self);

//  Create pair of sockets we can send through
zsock_t *input = zsock_new (ZMQ_ROUTER);
assert (input);
zsock_connect (input, "inproc://selftest-fty_proto");

zsock_t *output = zsock_new (ZMQ_DEALER);
assert (output);
zsock_bind (output, "inproc://selftest-fty_proto");

//  Encode/send/decode and verify each message type
int instance;
fty_proto_t *copy;
self = fty_proto_new (FTY_PROTO_METRIC);

//  Check that _dup works on empty message
copy = fty_proto_dup (self);
assert (copy);
fty_proto_destroy (&copy);

fty_proto_aux_insert (self, "Name", "Brutus");
fty_proto_aux_insert (self, "Age", "%d", 43);
fty_proto_set_type (self, "Life is short but Now lasts for ever");
fty_proto_set_element_src (self, "Life is short but Now lasts for ever");
fty_proto_set_value (self, "Life is short but Now lasts for ever");
fty_proto_set_unit (self, "Life is short but Now lasts for ever");
fty_proto_set_time (self, 123);
//  Send twice from same object
fty_proto_send_again (self, output);
fty_proto_send (&self, output);

for (instance = 0; instance < 2; instance++) {
    self = fty_proto_recv (input);
    assert (self);
    assert (fty_proto_routing_id (self));

    assert (fty_proto_aux_size (self) == 2);
    assert (streq (fty_proto_aux_string (self, "Name", "?"), "Brutus"));
    assert (fty_proto_aux_number (self, "Age", 0) == 43);
    assert (streq (fty_proto_type (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_element_src (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_value (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_unit (self), "Life is short but Now lasts for ever"));
    assert (fty_proto_time (self) == 123);
    fty_proto_destroy (&self);
}
self = fty_proto_new (FTY_PROTO_ALERT);

//  Check that _dup works on empty message
copy = fty_proto_dup (self);
assert (copy);
fty_proto_destroy (&copy);

fty_proto_aux_insert (self, "Name", "Brutus");
fty_proto_aux_insert (self, "Age", "%d", 43);
fty_proto_set_rule (self, "Life is short but Now lasts for ever");
fty_proto_set_element_src (self, "Life is short but Now lasts for ever");
fty_proto_set_state (self, "Life is short but Now lasts for ever");
fty_proto_set_severity (self, "Life is short but Now lasts for ever");
fty_proto_set_description (self, "Life is short but Now lasts for ever");
fty_proto_set_time (self, 123);
fty_proto_set_action (self, "Life is short but Now lasts for ever");
//  Send twice from same object
fty_proto_send_again (self, output);
fty_proto_send (&self, output);

for (instance = 0; instance < 2; instance++) {
    self = fty_proto_recv (input);
    assert (self);
    assert (fty_proto_routing_id (self));

    assert (fty_proto_aux_size (self) == 2);
    assert (streq (fty_proto_aux_string (self, "Name", "?"), "Brutus"));
    assert (fty_proto_aux_number (self, "Age", 0) == 43);
    assert (streq (fty_proto_rule (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_element_src (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_state (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_severity (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_description (self), "Life is short but Now lasts for ever"));
    assert (fty_proto_time (self) == 123);
    assert (streq (fty_proto_action (self), "Life is short but Now lasts for ever"));
    fty_proto_destroy (&self);
}
self = fty_proto_new (FTY_PROTO_DATA);

//  Check that _dup works on empty message
copy = fty_proto_dup (self);
assert (copy);
fty_proto_destroy (&copy);

fty_proto_aux_insert (self, "Name", "Brutus");
fty_proto_aux_insert (self, "Age", "%d", 43);
fty_proto_set_type (self, "Life is short but Now lasts for ever");
fty_proto_set_key (self, "Life is short but Now lasts for ever");
fty_proto_set_value (self, "Life is short but Now lasts for ever");
//  Send twice from same object
fty_proto_send_again (self, output);
fty_proto_send (&self, output);

for (instance = 0; instance < 2; instance++) {
    self = fty_proto_recv (input);
    assert (self);
    assert (fty_proto_routing_id (self));

    assert (fty_proto_aux_size (self) == 2);
    assert (streq (fty_proto_aux_string (self, "Name", "?"), "Brutus"));
    assert (fty_proto_aux_number (self, "Age", 0) == 43);
    assert (streq (fty_proto_type (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_key (self), "Life is short but Now lasts for ever"));
    assert (streq (fty_proto_value (self), "Life is short but Now lasts for ever"));
    fty_proto_destroy (&self);
}

zsock_destroy (&input);
zsock_destroy (&output);
----
