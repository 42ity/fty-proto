<class name="fty_proto" state="draft" >
<!--
    fty_proto - Core FTY protocols

    Codec header for fty_proto.

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: fty_proto.xml, or
     * The code generation script that built this file: zproto_codec_c_v1
    ************************************************************************
    Copyright (C) 2014 - 2015 Eaton                                        
                                                                           
    This program is free software; you can redistribute it and/or modify   
    it under the terms of the GNU General Public License as published by   
    the Free Software Foundation; either version 2 of the License, or      
    (at your option) any later version.                                    
                                                                           
    This program is distributed in the hope that it will be useful,        
    but WITHOUT ANY WARRANTY; without even the implied warranty of         
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          
    GNU General Public License for more details.                           
                                                                           
    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.            
-->

    <constuctor>
        Create a new fty_proto
        <argument name = "id" type = "number" size = "4" />
    </constuctor>

    <constuctor name = "new_zpl">
        Create a new fty_proto from zpl/zconfig_t *
        <argument name = "config" type = "zconfig" />
    </constuctor>

    <destructor>
        Destroy the fty_proto
    </destructor>

    <method name = "is" singleton = "1">
        Parse a zmsg_t and decides whether it is fty_proto. Returns
        true if it is, false otherwise. Doesn't destroy or modify the
        original message.
        <argument name = "msg" type = "zmsg" />
        <return type = "boolean" />
    </method>

    <method name = "decode" singleton = "1">
        Parse a fty_proto from zmsg_t. Returns a new object, or NULL if
        the message could not be parsed, or was NULL. Destroys msg and
        nullifies the msg reference.
        <argument name = "msg_p" type = "zmsg" by_reference = "1" />
        <return type = "fty_proto" fresh = "1" />
    </method>

    <method name = "encode" singleton = "1">
        Encode fty_proto into zmsg and destroy it. Returns a newly created
        object or NULL if error. Use when not in control of sending the message.
        <argument name = "self_p" type = "fty_proto" by_reference = "1" />
        <return type = "zmsg" fresh = "1" />
    </method>

    <method name = "recv" singleton = "1">
        Receive and parse a fty_proto from the socket. Returns new object,
        or NULL if error. Will block if there's no message waiting.
        <argument name = "input" type = "anything" />
        <return type = "fty_proto" fresh = "1" />
    </method>

    <method name = "recv_nowait" singleton = "1">
        Receive and parse a fty_proto from the socket. Returns new object,
        or NULL either if there was no input waiting, or the recv was interrupted.
        <argument name = "input" type = "anything" />
        <return type = "fty_proto" fresh = "1" />
    </method>

    <method name = "send" singleton = "1">
        Send the fty_proto to the output, and destroy it
        <argument name = "self_p" type = "fty_proto" by_reference = "1" />
        <argument name = "output" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "send_again" singleton = "1">
        Send the fty_proto to the output, and do not destroy it
        <argument name = "self" type = "fty_proto" />
        <argument name = "output" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "encode_metric" singleton = "1">
        Encode the METRIC
        <argument name = "aux" type = "zhash" />
        <argument name = "type" type = "string" />
        <argument name = "element_src" type = "string" />
        <argument name = "value" type = "string" />
        <argument name = "unit" type = "string" />
        <argument name = "ttl" type = "number" size = "4" />
        <return type = "zmsg" fresh = "1" />
    </method>

    <method name = "encode_alert" singleton = "1">
        Encode the ALERT
        <argument name = "aux" type = "zhash" />
        <argument name = "rule" type = "string" />
        <argument name = "element_src" type = "string" />
        <argument name = "state" type = "string" />
        <argument name = "severity" type = "string" />
        <argument name = "description" type = "string" />
        <argument name = "time" type = "number" size = "8" />
        <argument name = "action" type = "string" />
        <return type = "zmsg" fresh = "1" />
    </method>

    <method name = "encode_asset" singleton = "1">
        Encode the ASSET
        <argument name = "aux" type = "zhash" />
        <argument name = "name" type = "string" />
        <argument name = "operation" type = "string" />
        <argument name = "ext" type = "zhash" />
        <return type = "zmsg" fresh = "1" />
    </method>


    <method name = "send_metric" singleton = "1">
        Send the METRIC to the output in one step
        WARNING, this call will fail if output is of type ZMQ_ROUTER.

        <argument name = "output" type = "anything" />
        <argument name = "aux" type = "zhash" />
        <argument name = "type" type = "string" />
        <argument name = "element_src" type = "string" />
        <argument name = "value" type = "string" />
        <argument name = "unit" type = "string" />
        <argument name = "ttl" type = "number" size = "4" />
        <return type = "integer" />
    </method>

    <method name = "send_alert" singleton = "1">
        Send the ALERT to the output in one step
        WARNING, this call will fail if output is of type ZMQ_ROUTER.

        <argument name = "output" type = "anything" />
        <argument name = "aux" type = "zhash" />
        <argument name = "rule" type = "string" />
        <argument name = "element_src" type = "string" />
        <argument name = "state" type = "string" />
        <argument name = "severity" type = "string" />
        <argument name = "description" type = "string" />
        <argument name = "time" type = "number" size = "8" />
        <argument name = "action" type = "string" />
        <return type = "integer" />
    </method>

    <method name = "send_asset" singleton = "1">
        Send the ASSET to the output in one step
        WARNING, this call will fail if output is of type ZMQ_ROUTER.

        <argument name = "output" type = "anything" />
        <argument name = "aux" type = "zhash" />
        <argument name = "name" type = "string" />
        <argument name = "operation" type = "string" />
        <argument name = "ext" type = "zhash" />
        <return type = "integer" />
    </method>

    <method name = "dup">
        Duplicate the fty_proto message
        <return type = "fty_proto" fresh = "1" />
    </method>

    <method name = "print">
        Print contents of message to stdout
    </method>

    <method name = "zpl">
        Export class as zconfig_t*. Caller is responsibe for destroying the instance
        <argument name = "parent" type = "zconfig" />
        <return type = "zconfig" fresh = "1" />
    </method>

    <method name = "routing_id">
        Get the message routing id
        <return type = "zframe" fresh = "1" />
    </method>

    <method name = "set_routing_id">
        Set the message routing id
        <argument name = "routing_id" type = "zframe" />
    </method>

    <method name = "id">
        Get the fty_proto id
        <return type = "integer" />
    </method>

    <method name = "set_id">
        Set the fty_proto id
        <argument name = "id" type = "integer" />
    </method>

    <method name = "command">
        Return the printable command
        <return type = "string" />
    </method>


    <method name = "aux">
        Get/set the aux field
        <return type = "zhash" />
    </method>
    <method name = "get_aux">
        Get/set the aux field and transfer ownership to caller
        <return type = "zhash" fresh = "1"/>
    </method>
    <method name = "set_aux">
        Get/set the aux field, transferring ownership from caller
        <argument name = "aux_p" type = "zhash" by_reference = "1"/>
    </method>

    <method name = "aux_string">
        Get/set a value in the aux dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "string" />
        <return type = "string" />
    </method>
    
    <method name = "aux_number">
        Get/set a value in the aux dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "number" size = "8" />
        <return type = "number" size = "8" />
    </method>

    <method name = "aux_insert" >
        Get/set a value in the aux dictionary
        <argument name = "key" type = "string" />
        <argument name = "format" type = "format" />
    </method>
    <method name = "aux_size" >
        Get/set a value in the aux dictionary
        <return type = "size" />
    </method>

    <method name = "type">
        Get/set the type field
        <return type = "string" />
    </method>
    <method name = "set_type">
        Get/set the type field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "element_src">
        Get/set the element_src field
        <return type = "string" />
    </method>
    <method name = "set_element_src">
        Get/set the element_src field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "value">
        Get/set the value field
        <return type = "string" />
    </method>
    <method name = "set_value">
        Get/set the value field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "unit">
        Get/set the unit field
        <return type = "string" />
    </method>
    <method name = "set_unit">
        Get/set the unit field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "ttl">
        Get/set the ttl field
        <return type = "number" size = "4" />
    </method>
    <method name = "set_ttl">
        Get/set the ttl field
        <argument name = "ttl" type = "number" size = "4" />
    </method>

    <method name = "rule">
        Get/set the rule field
        <return type = "string" />
    </method>
    <method name = "set_rule">
        Get/set the rule field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "state">
        Get/set the state field
        <return type = "string" />
    </method>
    <method name = "set_state">
        Get/set the state field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "severity">
        Get/set the severity field
        <return type = "string" />
    </method>
    <method name = "set_severity">
        Get/set the severity field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "description">
        Get/set the description field
        <return type = "string" />
    </method>
    <method name = "set_description">
        Get/set the description field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "time">
        Get/set the time field
        <return type = "number" size = "8" />
    </method>
    <method name = "set_time">
        Get/set the time field
        <argument name = "time" type = "number" size = "8" />
    </method>

    <method name = "action">
        Get/set the action field
        <return type = "string" />
    </method>
    <method name = "set_action">
        Get/set the action field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "name">
        Get/set the name field
        <return type = "string" />
    </method>
    <method name = "set_name">
        Get/set the name field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "operation">
        Get/set the operation field
        <return type = "string" />
    </method>
    <method name = "set_operation">
        Get/set the operation field
        <argument name = "format" type = "format"/>
    </method>

    <method name = "ext">
        Get/set the ext field
        <return type = "zhash" />
    </method>
    <method name = "get_ext">
        Get/set the ext field and transfer ownership to caller
        <return type = "zhash" fresh = "1"/>
    </method>
    <method name = "set_ext">
        Get/set the ext field, transferring ownership from caller
        <argument name = "ext_p" type = "zhash" by_reference = "1"/>
    </method>

    <method name = "ext_string">
        Get/set a value in the ext dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "string" />
        <return type = "string" />
    </method>
    
    <method name = "ext_number">
        Get/set a value in the ext dictionary
        <argument name = "key" type = "string" />
        <argument name = "default_value" type = "number" size = "8" />
        <return type = "number" size = "8" />
    </method>

    <method name = "ext_insert" >
        Get/set a value in the ext dictionary
        <argument name = "key" type = "string" />
        <argument name = "format" type = "format" />
    </method>
    <method name = "ext_size" >
        Get/set a value in the ext dictionary
        <return type = "size" />
    </method>

    <method name = "test" singleton = "1">
        Self test of this class
        <argument name = "verbose" type = "boolean" />
    </method>
</class>

